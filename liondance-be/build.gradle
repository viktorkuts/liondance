plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'io.freefair.lombok' version '6.6.1'
	id 'jacoco'
}

group = 'com.liondance.liondance-backend'
version = '1.0.0-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

ext{
	flapdoodle = "4.18.0"
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	implementation "de.flapdoodle.embed:de.flapdoodle.embed.mongo.spring3x:${flapdoodle}"
	implementation "org.springframework.security:spring-security-oauth2-client"
//	implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"
	implementation "org.springframework.security:spring-security-oauth2-jose"
	implementation "org.springframework.security:spring-security-oauth2-resource-server"
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	testImplementation "de.flapdoodle.embed:de.flapdoodle.embed.mongo.spring3x:${flapdoodle}"
	testImplementation "org.awaitility:awaitility"
}

jacocoTestReport {
	dependsOn test
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect{
			fileTree(dir: it)
		}))
	}
	reports {
		xml.required = true
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.80
			}
		}
	}
}

jacoco {
	toolVersion = '0.8.11'
}

test{
	finalizedBy jacocoTestReport
}

check{
	dependsOn jacocoTestCoverageVerification
}

tasks.named('test') {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}
